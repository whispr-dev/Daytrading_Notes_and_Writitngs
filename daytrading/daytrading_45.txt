Predicting Stock Prices with Machine Learning: A Step-by-Step Tutorial Using Python
Ahmad Waleed
PythonForAll
Ahmad Waleed

·
Follow

Published in
PythonForAll

·
5 min read
·
Aug 18, 2024





In today’s rapidly changing financial markets, predicting stock prices has become a fascinating and valuable exercise for investors, data scientists, and anyone interested in finance. While predicting the future prices of stocks is notoriously difficult due to market volatility, machine learning offers powerful tools that can help us make educated predictions. In this tutorial, we’ll walk through the process of predicting stock prices using a simple yet effective machine learning algorithm: Linear Regression.


What is Linear Regression?
Linear regression is a supervised learning algorithm that models the relationship between a dependent variable (in our case, stock prices) and one or more independent variables (features). The goal is to find the best-fitting line through the data points that can be used to predict future values.

Step 1: Setting Up the Environment
Before we dive into the code, ensure you have the necessary libraries installed. If not, you can install them using pip:

pip install pandas numpy matplotlib scikit-learn yfinance
We will use the following libraries:

Pandas for data manipulation.
NumPy for numerical operations.
Matplotlib for plotting.
Scikit-learn for machine learning.
Yfinance to fetch historical stock data.
Step 2: Fetching Historical Stock Data
Let’s start by importing the necessary libraries and fetching the historical data for a specific stock using the yfinance library.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import yfinance as yf

# Fetch data for a specific stock, e.g., Nvidia (NVDA)
ticker = 'NVDA'
data = yf.download(ticker, start='2020-01-01', end='2024-01-01')
Step 3: Exploring the Data
It’s always good practice to explore the data to understand its structure. Let’s take a quick look at the first few rows of our dataset.

print(data.head())
This will output something like:

              Open    High     Low   Close  Adj Close     Volume
Date                                                            
2023-01-03  14.851  14.996  14.096  14.315  14.306804  401277000
2023-01-04  14.567  14.853  14.241  14.749  14.740556  431324000
2023-01-05  14.491  14.564  14.148  14.265  14.256834  389168000
2023-01-06  14.474  15.010  14.034  14.859  14.850492  405044000
2023-01-09  15.284  16.056  15.141  15.628  15.619054  504231000
Step 4: Preparing the Data
For this tutorial, we’ll focus on predicting the ‘Close’ price of the stock. Let’s create the features (independent variables) and the target variable (dependent variable).

# Create a new column 'Prediction' which is the shifted 'Close' price
data['Prediction'] = data['Close'].shift(-30)  # Predicting 30 days into the future

# The feature dataset (X) will be the 'Close' prices
X = np.array(data['Close']).reshape(-1, 1)
# The target dataset (y) will be the shifted 'Close' prices
y = np.array(data['Prediction'])
# Remove the last 30 rows of the data (as they have NaN in 'Prediction')
X = X[:-30]
y = y[:-30]
Step 5: Splitting the Data
We need to split the data into training and testing sets to evaluate our model’s performance.

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
Step 6: Training the Model
We’ll now use Linear Regression to train our model on the training data.

# Create and train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

Step 7: Making Predictions
Once the model is trained, we can use it to make predictions on the test set.

# Making predictions on the test set
predictions = model.predict(X_test)
Step 8: Evaluating the Model
Let’s evaluate the model’s performance using the Mean Squared Error (MSE) metric, which measures the average squared difference between the actual and predicted values.

mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
Step 9: Visualizing the Results
To better understand how well our model is performing, we can plot the actual versus predicted values.

# Plotting the actual vs predicted prices
plt.figure(figsize=(10,6))
plt.plot(y_test, label='Actual Prices')
plt.plot(predictions, label='Predicted Prices')
plt.title(f'{ticker} Stock Price Prediction')
plt.xlabel('Days')
plt.ylabel('Price')
plt.legend()
plt.show()
This plot gives us a visual representation of how close our predicted prices are to the actual prices.


Step 10: Predicting Future Prices
Now that we’ve trained and tested our model, let’s use it to predict future stock prices.

# Predicting the next 30 days of stock prices
future_X = np.array(data['Close'])[-30:].reshape(-1, 1)
future_predictions = model.predict(future_X)
# Plotting future predictions
plt.figure(figsize=(10,6))
plt.plot(np.arange(1, 31), future_predictions, label='Future Predictions')
plt.title(f'{ticker} Stock Price Prediction for Next 30 Days')
plt.xlabel('Days into the Future')
plt.ylabel('Predicted Price')
plt.legend()
plt.show()

Conclusion
In this tutorial, we walked through the process of predicting stock prices using a simple linear regression model in Python. While linear regression is a basic model, it provides a solid foundation for understanding how machine learning can be applied to financial data.

It’s important to remember that stock markets are highly unpredictable, and even the best models can’t account for all the factors that influence stock prices. However, by continually improving your models and incorporating more sophisticated techniques (like neural networks, ensemble methods, etc.), you can develop more accurate predictions.

Whether you’re an aspiring data scientist, a financial analyst, or just someone curious about the stock market, understanding how to use machine learning for stock price prediction is a valuable skill. Start experimenting with different models, features, and datasets to see what insights you can uncover!

Thank you for reading until the end. Before you go: